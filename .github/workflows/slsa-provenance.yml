name: SLSA go releaser
on:
  workflow_dispatch:
  push:
    tags:
      - "*"

permissions: read-all


env:
  IMAGE_REGISTRY: ghcr.io
  # NOTE: This pushes a container image to a "package" under the
  # slsa-framework GitHub org.
  # The image name should be of the form: slsa-framework/example-package.<test name>
  IMAGE_NAME: zlabjp/slsa-provenance-test

jobs:
  # Generate ldflags dynamically.
  # Optional: only needed for ldflags.
  args:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ldflags.outputs.version }}
    steps:
      - id: checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"

  # Trusted builder.
  build:
    permissions:
      id-token: write # To sign the provenance.
      contents: write # To upload assets to release.
      actions: read # To read the workflow path.
    needs: args
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.5.0
    with:
      go-version: 1.19
      evaluated-envs: "VERSION:${{needs.args.outputs.version}}"

  container:
    permissions:
      contents: read # For reading repository contents.
      packages: write # For writing container images.
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0

      - uses: slsa-framework/slsa-verifier/actions/installer@v2.0.1
      - run: |
          version=$(slsa-verifier version 2>&1 | grep GitVersion | cut -d ':' -f2 | tr -d "[:space:]")
          echo "installed $version"

      # Download artifact and provenance
      # TODO: fix download path
      - uses: actions/download-artifact@v3

      # Verify artifacts
      - name: Verify binaries
        env:
          ARTIFACT: "${{ needs.build.outputs.go-binary-name }}"
        run: |
          set -eu
          
          PROVENANCE=${ARTIFACT}.intoto.jsonl
          TAG=${GITHUB_REF##*/}
          
          echo "Verifying $ARTIFACT"
          slsa-verifier verify-artifact "${ARTIFACT}/${ARTIFACT}" \
                        --provenance-path "${PROVENANCE}/${PROVENANCE}" \
                        --source-uri "github.com/$GITHUB_REPOSITORY" \
                        --source-tag "${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2.4.1

      - name: Authenticate Docker
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # v4.3.0
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
        id: build
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image
        id: image
        run: |
          # NOTE: We need to use the image and digest in order to make sure
          # that the image we attest has not been modified.
          # NOTE: The digest output from docker/build-push-action is of the
          # form "sha256:<digest>"
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "::set-output name=image::$image_name"

  provenance:
    needs: [container]
    permissions:
      id-token: write # For signing.
      actions: read # For reading workflow info.
      packages: write # For uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@main
    with:
      image: ${{ needs.container.outputs.image }}
      digest: ${{ needs.container.outputs.digest }}
      registry-username: ${{ github.actor }}
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
      
